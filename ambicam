#!/usr/bin/python
import argparse
import cv2
import json
import numpy as np
import picamera
import picamera.array
import signal
import socket
import sys
import time

HOST = '192.168.1.104'
PORT = 19444
PRIORITY = 90
RESOLUTION = (640,480)
FRAMERATE = 45
OFFSET = 10

def compute_map(M_inv, x, y, width, height):
    coords = []
    for j in range(int(y), int(y+height)):
        for i in range(int(x), int(x+width)):
            coords.append([i, j, 1])
    return np.dot(M_inv, np.array(coords).T).astype('float32')

class HyperionOutput(picamera.array.PiRGBAnalysis):
    def __init__(self, camera, sock, options, M, width, height, offset=10):
        super(HyperionOutput, self).__init__(camera)
        self.sock = sock
        self.options = options
        self.M_inv = np.linalg.inv(M)
        self.width = int(width)
        self.height = int(height)
        self.offset = offset
        # Calculate source image maps
        # TODO(SN): calculate corners only on top/bottom?
        self.top_map = compute_map(self.M_inv, 0, 0, width, offset)
        self.left_map = compute_map(self.M_inv, 0, 0, offset, height)
        self.right_map = compute_map(self.M_inv, width-offset, 0, offset, height)
        self.bottom_map = compute_map(self.M_inv, 0, height-offset, width, offset)
        self.start= time.perf_counter()

        if self.options.preview:
            cv2.namedWindow('input', cv2.WINDOW_GUI_EXPANDED)
            cv2.namedWindow('warped', cv2.WINDOW_GUI_EXPANDED)

    def analyze(self, img):
        capture = time.perf_counter()
        # Warp image map-by-map
        top = cv2.GaussianBlur(cv2.remap(img, self.top_map[0], self.top_map[1],
                                     cv2.INTER_LINEAR).reshape(self.offset,self.width,3),
                               (5,5), 3)
        left = cv2.GaussianBlur(cv2.remap(img, self.left_map[0], self.left_map[1],
                                      cv2.INTER_LINEAR).reshape(self.height,self.offset,3),
                                (5,5), 3)
        right = cv2.GaussianBlur(cv2.remap(img, self.right_map[0], self.right_map[1],
                                       cv2.INTER_LINEAR).reshape(self.height,self.offset,3),
                                 (5,5), 3)
        bottom = cv2.GaussianBlur(cv2.remap(img, self.bottom_map[0], self.bottom_map[1],
                                        cv2.INTER_LINEAR).reshape(self.offset,self.width,3),
                                  (5,5), 3)
        # Determine colors
        # TODO use led geometry from hyperion
        colors = []
        for i in range(19): # bottom center -> bottom left
            col = (self.width/2)-i*(self.width/2-self.offset)/19
            colors.extend(reversed(bottom[self.offset/2, col].tolist()))
        for i in range(20): # bottom left -> top left
            row = (self.height-self.offset)-i*(self.height-2*self.offset)/20
            colors.extend(reversed(left[row, self.offset/2].tolist()))
        for i in range(36): # top left -> top right
            col = self.offset+i*(self.width-2*self.offset)/36
            colors.extend(reversed(top[self.offset/2, col].tolist()))
        for i in range(20): # top left -> bottom left
            row = self.offset+i*(self.height-2*self.offset)/20
            colors.extend(reversed(right[row, self.offset/2].tolist()))
        for i in range(17): # bottom right -> bottom center
            col = (self.width-self.offset)-i*(self.width/2-self.offset)/17
            colors.extend(reversed(bottom[self.offset/2, col].tolist()))
        warp = time.perf_counter()
        print('warp:', warp - capture)
        data = (json.dumps({
            'command': 'color',
            'priority': PRIORITY,
            'color': colors
        }) + '\n').encode('utf-8')
        self.sock.send(data)
        if self.options.preview:
            # Stitch and preview
            cv2.imshow('input', img)
            warped = np.zeros((self.height, self.width, 3), dtype='uint8')
            warped[:self.offset,:] += top
            warped[self.offset:-self.offset,:self.offset] += left[self.offset:-self.offset,:]
            warped[self.offset:-self.offset,self.width-self.offset:] += right[self.offset:-self.offset,:]
            warped[self.height-self.offset:,:] += bottom
            cv2.imshow('warped', warped)
            cv2.waitKey(100)
        print('FPS: ', 1 / (time.perf_counter() - self.start))
        self.start = time.perf_counter()

def main():
    parser = argparse.ArgumentParser(description='AmbiCam runtime')
    parser.add_argument('-p', '--preview', dest='preview', action='store_true',
                        help='show captured and warped images (slow!)')
    parser.add_argument('-a', '--awb-mode', dest='awb_mode', default='auto',
                        help='automatic white balance mode')
    parser.add_argument('--awb-gain-red', dest='awb_gain_red', type=float, default=1.52,
                        help='automatic white balance gain for red (only in mode: auto)')
    parser.add_argument('--awb-gain-blue', dest='awb_gain_blue', type=float, default=1.00,
                        help='automatic white balance gain for blue (only in mode: auto)')
    options = parser.parse_args()

    M = np.load('M.npy')
    width, height = np.load('res.npy')
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((HOST, PORT))

    def sigint(signal, frame):
        data = json.dumps({'command': 'clearall'}) + '\n'
        sock.sendall(data.encode('utf-8'))
        sock.close()
        sys.exit(0)
    signal.signal(signal.SIGINT, sigint)

    with picamera.PiCamera(resolution=RESOLUTION, framerate=FRAMERATE) as camera:
        camera.awb_mode = options.awb_mode
        camera.awb_gains = (options.awb_gain_red, options.awb_gain_blue)
        with HyperionOutput(camera, sock, options, M, width, height, offset=OFFSET) as output:
            camera.start_recording(output, 'bgr')
            try:
                while True:
                    camera.wait_recording(1)
            finally:
                camera.stop_recording()

if __name__ == '__main__':
    main()
